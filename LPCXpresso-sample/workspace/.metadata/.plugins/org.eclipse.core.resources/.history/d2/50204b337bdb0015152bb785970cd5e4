/**
 * @file   srf02.c
 * @brief  srf02を使えるようにするための関数群 <br>
 *
 * @author RTCorp. Ryota Takahashi
 */


#include "type.h"
#include "srf02.h"
#include "i2c.h"
#include "uart.h"
#include "SystemTickTimer.h"
#include "debug.h"


//i2cの操作に必要なもの達のextern宣言.  実体はi2c.cにある
extern volatile uint8_t I2CMasterBuffer[BUFSIZE];
extern volatile uint8_t I2CSlaveBuffer[BUFSIZE];
extern volatile uint32_t I2CReadLength, I2CWriteLength;

//srf02のアドレスとかの宣言
#define Add_srf02 0xE0
#define Command_register 0x00
#define Result_register 0x02


/**
 * srf02から距離データを読み取る.
 * srf02は距離データを得るのに100msec程かかるため
 * この関数ではデータの読み出しをし,
 * その後srf02にデータの更新要求をしている.
 * そのためこの関数を100msecより短い時間のうちに2回呼ばないこと
 *
 * @param void
 * @return  range_data[cm]
 */

uint16_t getRangeData() {
	//srf02からのデータ格納変数宣言
	uint16_t range_high_byte;
	uint16_t range_low_byte;
	uint16_t range_data;

	//距離データの上位8ビットを読み出す
	I2CWriteLength = 2;
	I2CReadLength = 1;
	I2CMasterBuffer[0] = 0xE0;
	I2CMasterBuffer[1] = 0x02;
	I2CMasterBuffer[2] = 0xE1;
	I2CEngine();

	range_high_byte = I2CSlaveBuffer[0];

	//距離データの下位8ビットを読み出す
	I2CWriteLength = 2;
	I2CReadLength = 1;
	I2CMasterBuffer[0] = 0xE0;
	I2CMasterBuffer[1] = 0x03;
	I2CMasterBuffer[2] = 0xE1;
	I2CEngine();
	//myPrintfUSB("0x03 \t\t: %x\n\r", I2CSlaveBuffer[0]);
	//wait1msec(5);
	range_low_byte = I2CSlaveBuffer[0];

	range_data = range_high_byte << 8;
	range_data = range_data | range_low_byte;

	//myPrintfUSB("%d,%d\n\r", elapsed_time,range_data);

	//srf02に距離データを更新するように要求する
	I2CWriteLength = 3;
	I2CReadLength = 0;
	I2CMasterBuffer[0] = 0xE0; //default sensor address
	I2CMasterBuffer[1] = 0x00; //location
	I2CMasterBuffer[2] = 0x51; //command 0x51にするとセンサーアドレスが変更される（なぜ？
	I2CEngine();

	return range_data;
}



