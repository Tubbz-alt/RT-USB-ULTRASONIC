/**
 * @file   MainFunction.c
 * @brief  データの送信を行う<br>
 *         10msec毎に割り込み関数で処理を実行
 *
 * @author RTCorp. Ryota Takahashi
 */


#include "LPC13xx.h"
#include "core_cm3.h"
#include "type.h"

#include "timer.h"
#include "pwm.h"
#include "MainFunction.h"
#include "UserInterface.h"

#include "mpu9150.h"
#include "debug.h"
#include "uart.h"
#include "tinyMathFunction.h"

#include "usbTransmission.h"


///////uart.cに宣言があり/////////////////////////
extern volatile uint32_t UARTCount;
extern volatile uint8_t  UARTBuffer[BUFSIZE];
//////////////////////////////////////////////

volatile static float motor_duty = 0.0;
volatile static float degree = 0.0;
volatile static uint8_t flag_send_data_enable = 0;

volatile static uint32_t time;
volatile static uint8_t flag_slope = 0; //1:坂を上っている 0:坂を上っていない
volatile static uint8_t flag_curve = 0; //1:curving 0:not curving
volatile static uint8_t flag_stop = 0;  //1:stop 0:moving


/**
 * AICHIPFunction.c内の関数を使用できるようにする
 *
 * @param void
 * @return void
 */
void initMainFunction(void)
{
	startTimer32_1();
}

/**
 * 機体データの送信をするかどうかを選択
 *
 * @param en 1:送信 0:送信じ禁止
 * @return void
 */
void setSendDataEnable(uint8_t en)
{
	flag_send_data_enable = en;
}

/**
 * 10msec毎に行われる処理 <br>
 *          <li>各種情報をUART,USBで送信 </li>
 *         </ul>
 * @param  void
 * @return void
 */
void TIMER32_1_IRQHandler(void)
{

	static uint16_t count = 0;
	GETDAT_T send_data;

	static uint8_t timestamp;
	uint8_t i;
	float acc_vec[3];
	float acc_norm = 0.0;
	float acc_norm_LPF = 0.0;
	float gain_LPF = 0.01;
	float omega_vec[3];
	float omega_str_LPF_vec[3]; //強いローパスフィルタがかかった値を格納
	float diff_omega[3];        //強いローパスフィルタをかけたジャイロの値と現在のジャイロの値の差分

    uint16_t v_bat;


	LPC_TMR32B1->IR=0x08; //clear interrupt flag

	//送信データ格納用変数のヘッダ
	send_data.num  = 30;
	send_data.d[0] = 0xff;
	send_data.d[1] = 0xff;
	send_data.d[2] = 0x52;
	send_data.d[3] = 0x54;
	send_data.d[4] = 0x34;
	send_data.d[5] = 0x57;
	send_data.d[6] = 0x00;  // 8/7 version
	send_data.d[7] = timestamp;

	if(timestamp == 0xff) timestamp = 0;
	else timestamp++;

	//9軸センサの観測値を送信用配列に格納
	getDataFromMPU6050( (uint8_t *)(&send_data.d[8]) );
	getDataFromAK8975( (uint8_t *)(&send_data.d[22]) );

	//9軸センサの観測値を変数に格納
	getOmega(&omega_vec[0]);
	getAccLPF(&acc_vec[0]);
	getOmegaStrLPF(&omega_str_LPF_vec[0]);
	//静止状態の判定 omega < 0.1 deg/sec かつ |1-|a||<0.01
	//もし静止状態ならば角速度を0.0にしてしまう.
	acc_norm = tSqrt(acc_vec[0]*acc_vec[0]+acc_vec[1]*acc_vec[1]+acc_vec[2]*acc_vec[2]);
	acc_norm_LPF = gain_LPF * acc_norm_LPF + (1.0-gain_LPF)*acc_norm;

	flag_stop = 0;
	if( ABS(acc_norm_LPF - acc_norm )<0.02 )
	{
		for(i=0;i<3;i++)
		{

			diff_omega[i] =  omega_str_LPF_vec[i] - omega_vec[i] ;
			if(ABS(diff_omega[i]) < DEG2RAD(0.3))
			{
				omega_vec[i] = 0.0;
			}

			if(ABS(diff_omega[0]) < DEG2RAD(0.3) &&
			   ABS(diff_omega[1]) < DEG2RAD(0.3) &&
			   ABS(diff_omega[2]) < DEG2RAD(0.3)
			) flag_stop = 1;
		}
	}

	if(ABS(omega_vec[2]) > DEG2RAD(100)) flag_curve = 1;
	else flag_curve = 0;

	if(ABS( 1- ABS(acc_vec[2])) >0.1  ) flag_slope = 1;
	else flag_slope = 0;


	//Batteryの電圧を送信用配列に格納
	v_bat  = (uint16_t)(getVoltage() * 13107);  //0.0~5.0を0から65535に変換
	send_data.d[28] =  0x000000ff & v_bat;
	send_data.d[29] = (0x0000ff00 & v_bat)>>8;


	//20Hzの周期でデータを送る (割り込み周期100Hz 5回に一回)
	if(count % 5 == 0 && flag_send_data_enable == 1)
	{
		//UART経由でデータを送信
		LPC_UART->IER = IER_THRE | IER_RLS;			    // Disable RBR
		UARTSend(&send_data.d[0], send_data.num);
		LPC_UART->IER = IER_THRE | IER_RLS | IER_RBR;	// Re-enable RBR

		if(isUSBConfig() == 1) //USB接続確立
		{
			//USB経由でデータを送信
			VCOM_SendData(send_data);
		}
	}

	count++;

}



/******************************************************************************
**                            End Of File
******************************************************************************/
